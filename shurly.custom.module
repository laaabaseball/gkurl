<?php

/**
 * @file
 * description modified shurly
 *
 */

/**
 * Load CSS and JS files needed by the module
 * @params both, css, js
 */
function shurly_css_js($which = 'both') {
  $path = drupal_get_path('module', 'shurly');
  if ($which == 'css' || $which == 'both') {
    drupal_add_css($path . '/shurly.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
  if ($which == 'js' || $which == 'both') {
    drupal_add_js($path . '/zeroclipboard/ZeroClipboard.js');
    drupal_add_js($path . '/shurly.js');
    drupal_add_js("ZeroClipboard.setMoviePath( '" . base_path() . $path . '/zeroclipboard/ZeroClipboard.swf' . "' );", 'inline');
  }
}

/**
 * Implements hook_init().
 */
function shurly_init() {
  // Add some custom CSS and JS files needed for shurly creation page
  if (arg(0) == 'shurly' && !arg(1)) {
    shurly_css_js();
  }
}


/**
 * Implements hook_help().
 */
function shurly_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#shurly":
      $output = '<div style="white-space:pre-wrap">' . htmlentities(file_get_contents('README.markdown', FILE_USE_INCLUDE_PATH)) . '</div>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function shurly_menu() {
  // callback for creation of URLs
  $items = array();

  $items['shurly'] = array(
    'title' => 'Submit a link',
    'description' => 'Create a short URL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shurly_create_form'),
    'access arguments' => array('Create short URLs'),
  );

  $items['shurly/delete/%'] = array(
    'title' => 'Delete URL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shurly_confirm_delete_form', 2),
    'access callback' => 'shurly_delete_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/shurly'] = array(
    'title' => 'ShURLy',
    'description'      => t('Limit the requests of ShURLy links by roles.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shurly_settings_form'),
    'access arguments' => array('Administer short URLs'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function shurly_permission() {
  return array(
    'Create short URLs' => array(
      'title' => t('Create short URLs'),
    ),
    'Enter custom URLs' => array(
      'title' => t('Enter custom URLs'),
    ),
    'View own URL stats' => array(
      'title' => t('View own URL stats'),
    ),
    'Delete own URLs' => array(
      'title' => t('Delete own URLs'),
    ),
    'Administer short URLs' => array(
      'title' => t('Administer short URLs'),
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function shurly_block_info() {
  $blocks['form'] = array(
    'info' => t('Short URL form'),
  );
  $blocks['bookmarklet'] = array(
    'info' => t('bookmarklet'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function shurly_block_view($delta = '') {
  $block = array();
  // don't show the block when user is on the callback page
  switch ($delta) {
    case 'form':
      if (user_access('Create short URLs') && arg(0) != 'shurly') {
        $block['subject'] = t('Create a short URL');
        $block['content'] = shurly_block_content_form();
      }
      break;
    case 'bookmarklet':
      if (user_access('Create short URLs')) {
        $block['subject'] = t('Bookmarklet');
        $block['content'] = shurly_block_content_bookmarklet();
      }
      break;
  }
  return $block;
}


/**
 * Generate Shurly creation form for respective block
 */
function shurly_block_content_form() {
  shurly_css_js();
  return drupal_get_form('shurly_create_form');
}


/**
 * Generate Shurly bookmarklet for respective block
 */
function shurly_block_content_bookmarklet() {
  shurly_css_js('css');
  return t("<p>Drag this link to your bookmark bar to quickly create a short URL from any page: <a class=\"shurly-bookmarklet\" href=\"!jsurl\">!sitename</a></p>", array('!jsurl' => "javascript:void(location.href='" . _surl('shurly', array('absolute' => TRUE)) . "?url='+encodeURIComponent(location.href))", '!sitename' => variable_get('site_name', 'gkurl.us')));
}


/**
 * Implements hook_boot().
 */
function shurly_boot() {
  // if the path has any unallowed characters in it (such as slashes),
  // it's not a short URL, so we can bail out and save ourselves a database call
  if (isset($_GET['q']) && shurly_validate_custom($_GET['q'])) {
    $row = db_query("SELECT rid, destination, source, count, uid FROM {shurly} WHERE BINARY source = :q AND active = 1", array(':q' => $_GET['q']))->fetchObject();
    if ($row) {
      shurly_goto($row);
    }
  }
}

/**
 * Implements hook_theme().
 */
function shurly_theme($existing, $type, $theme, $path) {
  return array(
    'shurly_create_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function shurly_views_api() {
  // Notifies the Views module that we're compatible with a particular API revision.
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'shurly') . '/views',
  );
}



/**
 * Access callback for deleting (deactivating) a URL
 */
function shurly_delete_access($rid) {
  if (is_numeric($rid)) {
    global $user;
    if (!$user->uid) {
      // anonymous users can't delete URLs
      return FALSE;
    }
    // see if there's a row
    $row = db_query('SELECT uid, source, destination FROM {shurly} WHERE rid = :rid', array('rid' => $rid))->fetchObject();
    // if there's a row, and either the user is an admin, or they've got permission to create and they own this URL, then let them access
    if ($row && (user_access('Administer short URLs') || (user_access('Delete own URLs') && $row->uid == $user->uid))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Confirmation form to delete a link
 */
function shurly_confirm_delete_form($form, &$form_state, $rid) {
  $destination = db_query('SELECT destination FROM {shurly} WHERE rid = :rid', array('rid' => $rid))->fetchField();
  $form['rid'] = array(
      '#type' => 'value',
      '#value' => $rid,
    );
    return confirm_form($form, t('Are you sure you want to delete and deactivate this URL?'), rawurldecode($_GET['destination']), t('You are about to deactivate the link which redirects to %url. Once this item is deleted, you will not be able to create another link with the same short URL.', array('%url' => $destination)));
}

/**
 * Submit handler for above form
 */
function shurly_confirm_delete_form_submit($form, &$form_state) {
  drupal_set_message(t('URL has been deactivated'));
  shurly_set_link_active($form_state['values']['rid'], 0);
}

/**
 * The main form to create new short URLs.
 */
function shurly_create_form($form, &$form_state) {
  $form['long_url'] = array(
    '#title' => t('Submit an image, video, or article link, and we\'ll shorten it'),
    '#type' => 'textfield',
	'#size' => 30,
    '#maxlength' => 255,
    '#default_value' => isset($form_state['storage']['shurly']['long_url']) ? $form_state['storage']['shurly']['long_url'] : ( isset($_GET['url']) ? $_GET['url'] : 'http://'),
    '#attributes' => array('tabindex' => 1),
  );

  $short_default = user_access('Enter custom URLs') ? (isset($form_state['storage']['shurly']['short_url']) ? $form_state['storage']['shurly']['short_url'] : '') : '';

  $form['short_url'] = array(
    '#type' => 'textfield',
    '#size' => 6,
    '#field_prefix' => $GLOBALS['base_url'] . '/',
    '#field_suffix' => ' <span class="shurly-choose"> ' . t('Optional: create a custom URL') . '</span>',
    '#default_value' => $short_default,
    '#access' => user_access('Enter custom URLs'),
    '#attributes' => array('tabindex' => 2),
  );

  if (isset($form_state['storage']['shurly']['final_url'])) {
    $form['result'] = array(
      '#type' => 'textfield',
      '#size' => 30,
      '#value' => $form_state['storage']['shurly']['final_url'],
      '#prefix' => '<div class="shurly-result">',
      '#suffix' => '</div>',
      '#field_prefix' => t('Your short URL:'),
      '#field_suffix' => ' <div id="shurly-copy-container" style="position:relative;"><div id="shurly-copy">' . t('copy') . '</div></div>
      <div class="social"><a href="http://twitter.com?status=' . urlencode($form_state['storage']['shurly']['final_url']) . '">' . t('Share on Twitter') . '</a>
	  <br/><a href="http://www.facebook.com/share.php?&u=' . urlencode($form_state['storage']['shurly']['final_url']) . '">' . t('Share on Facebook') . '</a></div></div>',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Shrink it!'),
    '#attributes' => array('tabindex' => 3),
  );

  unset($form_state['storage']['shurly']);

  return $form;

}

/**
 * Validation of the main form
 */
function shurly_create_form_validate($form, &$form_state) {

  if (!user_access('Create short URLs')) {
    form_set_error('', t('You do not have permission to create short URLs on this site SIGN IN'));
    return;
  }

  $rate_limit = shurly_rate_limit_allowed();
  if (!$rate_limit['allowed']) {
    form_set_error('', t('Rate limit exceeded. You are limited to @rate requests per @time minute period. Contact admin@gkurl.us for an exemption', array('@rate' => $rate_limit['rate'], '@time' => $rate_limit['time'])));
    return;
  }

  $form_state['values']['long_url'] = trim($form_state['values']['long_url']);
  $form_state['values']['short_url'] = trim($form_state['values']['short_url']);
  $vals = $form_state['values'];

  // check that they've entered a URL
  if ($vals['long_url'] == '' || $vals['long_url'] == 'http://' || $vals['long_url'] == 'https://') {
    form_set_error('long_url', t('Please enter a web URL'));
  }
  elseif (!shurly_validate_long($form_state['values']['long_url'])) {
    form_set_error('long_url', t('Invalid URL'));
  }

  if (trim($vals['short_url']) != '') {
    // a custom short URL has been entered
    $form_state['custom'] = TRUE;
    if (!shurly_validate_custom($vals['short_url'])) {
      form_set_error('short_url', t('Short URL contains unallowed characters'));
    }
    elseif ($exists = shurly_url_exists($vals['short_url'], $vals['long_url'])) {
      form_set_error('short_url', t('This short URL has already been used'));
      //if ($exists == 'found') {
      //  form_set_error('short_url', t('This short URL is already used'));
      //}
      //else {
      //  $form_state['storage']['shurly']['final_url'] = url($vals['short_url'], array('absolute' => TRUE));
      //  $form_state['url_exists'] = TRUE;
      //  drupal_set_message(t('This URL pair already exists'), 'error');
      //}
    }
    elseif (_surl($vals['short_url'], array('absolute' => TRUE)) == $vals['long_url']) {
      // check that link isn't to itself (creating infinite loop)
      // problem - http vs https
      form_set_error('short_url', t('You cannot create links to themselves'));
    }
    elseif (!shurly_path_available($vals['short_url'])) {
      form_set_error('short_url', t('This custom URL is reserved. Please choose another.'));
    }
  }
  else {
    // custom short URL field is empty
    $form_state['custom'] = FALSE;
    if ($exist = shurly_get_latest_short($vals['long_url'], $GLOBALS['user']->uid)) {
      $short = $exist;
      // we flag this as URL Exists so that it displays but doesn't get saved to the db
      $form_state['url_exists'] = TRUE;
    }
    else {
      $short = shurly_next_url();
    }
    $form_state['values']['short_url'] = $short;
    $form_state['storage']['shurly']['short_url'] = $short;
  }
}

/**
 * Submission of the main form
 */
function shurly_create_form_submit($form, &$form_state) {

  // submit the short URL form
  $long_url = $form_state['storage']['shurly']['long_url'] = $form_state['values']['long_url'];
  $short_url = $form_state['storage']['shurly']['short_url'] = $form_state['values']['short_url'];
  $final_url = $form_state['storage']['shurly']['final_url'] = rawurldecode(_surl($short_url, array('absolute' => TRUE)));
  $custom = $form_state['custom'];

  $form_state['rebuild'] = TRUE;

  if (empty($form_state['url_exists'])) {
    shurly_save_url($long_url, $short_url, NULL, $custom);
  }

}


/**
 * Settings form
 */
function shurly_settings_form($form, &$form_state) {

  $form['shurly_throttle'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rate limiting'),
    '#tree' => TRUE,
    '#description' => t('Limit requests by IP address. Leave blank for no rate limiting.<br /><strong>Note:</strong> Only roles with the \'Create short URLs\' permission are listed here. Change that permission <a href="!url">here</a>.', array('!url' => url('admin/people/permissions', array('fragment' => 'module-shurly')))),
  );
  $saved = variable_get('shurly_throttle', array());

  foreach (user_roles(FALSE, 'Create short URLs') as $rid => $name) {
    $rate = isset($saved[$rid]['rate']) ? $saved[$rid]['rate'] : NULL;
    $time = isset($saved[$rid]['time']) ? $saved[$rid]['time'] : NULL;

    $form['shurly_throttle'][$rid] = array(
      '#type' => 'fieldset',
      '#title' => check_plain($name),
      '#tree' => TRUE,
    );
    $form['shurly_throttle'][$rid]['rate'] = array(
      '#type' => 'textfield',
      '#size' => '3',
      '#prefix' => '<div class="container-inline">',
      '#field_suffix' => ' ' . t('requests'),
      '#default_value' => $rate,
    );
    $form['shurly_throttle'][$rid]['time'] = array(
      '#type' => 'textfield',
      '#size' => '3',
      '#field_prefix' => t('within'),
      '#field_suffix' => ' ' . t('minutes'),
      '#default_value' => $time,
      '#suffix' => '</div>',
    );
    $form['shurly_throttle'][$rid]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => isset($saved[$rid]['weight']) ? $saved[$rid]['weight'] : 0,
      '#description' => t('Order of this role when considering a user with multiple roles. A user\'s lightest role will take precedence.'),
    );

  }

  return system_settings_form($form);
}

/**
 * From http://www.php.net/manual/en/function.base-convert.php#52450
 *
 * Parameters:
 * $num - your decimal integer
 * $base - base to which you wish to convert $num (leave it 0 if you are providing $index or omit if you're using default (62))
 * $index - if you wish to use the default list of digits (0-1a-zA-Z), omit this option, otherwise provide a string (ex.: "zyxwvu")
 */
function shurly_dec2any($num, $base=62, $index=FALSE) {
    if (! $base ) {
        $base = strlen( $index );
    }
    elseif (! $index ) {
        // note: we could rearrange this string to get more random looking URLs
        // another note, to create printable URLs, omit the following characters: 01lIO
        $index = substr("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, $base );
    }
    $out = "";
    for ( $t = floor( log10( $num ) / log10( $base ) ); $t >= 0; $t-- ) {
        $a = floor( $num / pow( $base, $t ) );
        $out = $out . substr( $index, $a, 1 );
        $num = $num - ( $a * pow( $base, $t ) );
    }
    return $out;
}


/* *****************************************************
 * Flood Control
 * *****************************************************
 */

function shurly_cron() {
  // Cleanup the flood.
  db_query('DELETE FROM {shurly_flood} WHERE expiration < :time', array('time' => time()));
}

function shurly_flood_register_event($name, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }
  db_query("INSERT INTO {shurly_flood} (event, identifier, timestamp, expiration) VALUES (:event, :identifier, :timestamp, :expiration)", array('event' => $name, 'identifier' => ip_address(), 'timestamp' => time(), 'expiration' => time() + $window));
}

function shurly_flood_is_allowed($name, $threshold, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }
  $number = db_query("SELECT COUNT(*) FROM {shurly_flood} WHERE event = :event AND identifier = :identifier AND timestamp > :timestamp", array('event' => $name, 'identifier' => $identifier, 'timestamp' => time() - $window))->fetchField();
  return ($number < $threshold);
}

/* *****************************************************
 * API functions
 * *****************************************************
 */

/**
 * API function to shorten a URL
 * @arg $long_url - the long URL to shorten
 * @arg $custom - optional custom short URL
 *
 * @return an array with the following keys
 *   'success' => TRUE or FALSE
 *   'error' => reason for for failure
 *   'long_url' => the long url
 *   'short_url' => the short url
 */
function shurly_shorten($long_url, $custom = NULL, $account = NULL) {
  $success = FALSE;
  $account = ($account) ? $account : $GLOBALS['user'];
  $error = '';
  $no_save = FALSE;
  $rate_limit = shurly_rate_limit_allowed($account);
  if (!$rate_limit['allowed']) {
    $error = t('Rate limit exceeded. You are limited to @rate requests per @time minute period.', array('@rate' => $rate_limit['rate'], '@time' => $rate_limit['time']));
  }
  elseif (!shurly_validate_long($long_url)) {
    $error = t('Invalid long URL.');
  }
  elseif (is_null($custom)) {
    $latest = shurly_get_latest_short($long_url, $account->uid);
    if ($latest) {
      $no_save = TRUE;
      $success = TRUE;
      $short = $latest;
    }
    else {
      $short = shurly_next_url();
    }
  }
  else {
    $short = $custom;
    if (!shurly_validate_custom($short) || !shurly_path_available($short)) {
      $error .= $error ? ' ' : '';
      $error .= t('Invalid short URL.');
    }
    elseif (shurly_url_exists($short)) {
      $error .= $error ? ' ' : '';
      $error .= t('Existing short URL.');
    }
  }
  if (!$error && !$no_save) {
    if (shurly_save_url($long_url, $short, $account, $custom)) {
      $success = TRUE;
    }
    else {
      $error = t('Unknown database error.');
    }
  }
  return array(
    'success' => $success,
    'error' => $error,
    'longUrl' => $long_url,
    'shortUrl' => isset($short) ? _surl($short, array('absolute' => TRUE)) : '',
  );
}

function shurly_expand($short, $account = NULL) {
  $error = '';
  $success = FALSE;
  $rate_limit = shurly_rate_limit_allowed($account);
  if (!$rate_limit['allowed']) {
    $error = t('Rate limit exceeded. You are limited to @rate requests per @time minute period.', array('@rate' => $rate_limit['rate'], '@time' => $rate_limit['time']));
  }
  elseif ($redirect = shurly_get_redirect($short, TRUE)) {
    $success = TRUE;
    $long_url = $redirect->destination;
  }
  else {
    $error = t('Not found');
  }
  return array(
    'success' => $success,
    'error' => $error,
    'longUrl' => $long_url,
    'shortUrl' => _surl($short, array('absolute' => TRUE)),
  );
}

/**
 * Check rate limit for this user
 * return an array in the following format
 * array(
 *  'allowed' => TRUE/FALSE
 *  'rate' => number of requests allowed
 *  'time' => period of time in minutes
 * )
 */
function shurly_rate_limit_allowed($account = NULL) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }

  $settings = variable_get('shurly_throttle', array());

  if (is_array($account->roles)) {
    $use_rid = array_shift(array_keys($account->roles));
    // get list of roles with permission to create short URLs
    $creating_roles = user_roles(FALSE, 'Create short URLs');
    foreach ($account->roles as $rid => $name) {
      // check that this role has permission to create URLs, otherwise discard it
      if (array_key_exists($rid, $creating_roles)) {
        // find the lightest role... if roles are the same weight, use the next role
        $settings[$use_rid]['weight'] = isset($settings[$use_rid]['weight']) ? $settings[$use_rid]['weight'] : 0;
        $settings[$rid]['weight'] = isset($settings[$rid]['weight']) ? $settings[$rid]['weight'] : 0;
        $use_rid = $settings[$use_rid]['weight'] < $settings[$rid]['weight'] ? $use_rid : $rid;
        //Create array index if not exists for rate and time
        $settings[$use_rid]['rate'] = isset($settings[$use_rid]['rate']) ? $settings[$use_rid]['rate'] : NULL;
        $settings[$use_rid]['time'] = isset($settings[$use_rid]['time']) ? $settings[$use_rid]['time'] : NULL;
      }
    }
  }

  if (!empty($settings) && is_numeric($settings[$use_rid]['rate']) && is_numeric($settings[$use_rid]['time'])) {
    // see if it's allowed
    $allowed = shurly_flood_is_allowed('shurly', $settings[$use_rid]['rate'], $settings[$use_rid]['time'] * 60);
    // increment the counter
    shurly_flood_register_event('shurly', $settings[$use_rid]['time'] * 60);
    $return = array(
      'allowed' => $allowed,
      'rate' => $settings[$use_rid]['rate'],
      'time' => $settings[$use_rid]['time'],
    );
  }
  else {
    // not set... don't do a flood check
    $return = array(
      'allowed' => TRUE,
    );
  }

  return $return;
}

/**
 * API function to save a URL
 * @arg $custom is a TRUE/FALSE
 */
function shurly_save_url($long_url, $short_path, $account = NULL, $custom = NULL) {

  if (is_null($account)) {
    $account = $GLOBALS['user'];
  }

  $record = array();
  $record['destination'] = $long_url;
  $record['custom'] = $custom ? 1 : 0;
  $record['created'] = time();
  $record['source'] = $short_path;
  $record['uid'] = $account->uid;
  $record['count'] = $record['last_used'] = 0;
  $record['active'] = 1;

  return drupal_write_record('shurly', $record);

}


/**
 * Activate or deactivate a link
 */
function shurly_set_link_active($rid, $active) {
  $record = db_query('SELECT * FROM {shurly} WHERE rid = :rid', array('rid' => $rid))->fetchObject();
  if ($record) {
    $record->rid = $rid;
    $record->active = $active ? 1 : 0;
    return drupal_write_record('shurly', $record, 'rid');
  }
  else {
    return FALSE;
  }
}

/**
 * Validate custom short URL string
 *
 * @return TRUE if valid, FALSE if invalid
 */
function shurly_validate_custom($custom) {

  // check the length of the string
  if (strlen($custom) == 0) {
    return FALSE;
  }

  // disallow: #%&@*{}\:;<>?/+.,'"$|`^[] and space character
  return preg_match('/[\/#%&\@\*\{\}\\:\;<>\?\+ \.\,\'\"\$\|`^\[\]]/u', $custom) ? FALSE : TRUE;
}


function shurly_validate_long(&$long_url) {
  $return = TRUE;
  $match = FALSE;

  // if the person didn't remove the original http:// from the field, pull it out
  $long_url = preg_replace('!^http\://(http\://|https\://)!i', '\\1', $long_url);

  $long_parse = parse_url($long_url);
  $base_parse = parse_url($GLOBALS['base_url']);

  if ($long_parse === FALSE || !$long_parse['host']) {
    // malformed URL
    // or no host in the URL
    $return = FALSE;
  }
  elseif ($long_parse['scheme'] != 'http' && $long_parse['scheme'] != 'https') {
    $return = FALSE;
  }
  else {

    $long_domain_parts = explode('.', $long_parse['host']);
    $base_domain_parts = explode('.', $base_parse['host']);

    $count_long_domain = count($long_domain_parts);

    $last_long_part = isset($long_domain_parts[$count_long_domain - 1]) ? $long_domain_parts[$count_long_domain - 1] : NULL;
    $last_base_part = isset($base_domain_parts[$count_long_domain - 1]) ? $base_domain_parts[$count_long_domain - 1] : NULL;

    // if last domain part of entered URL matches last part of this domain
    if ($last_long_part == $last_base_part) {
      // and (if there's a 2nd to last)
      if ($count_long_domain >= 2) {

        $last_long_penult = isset($long_domain_parts[$count_long_domain - 2]) ? $long_domain_parts[$count_long_domain - 2] : NULL;
        $last_base_penult = isset($base_domain_parts[$count_long_domain - 2]) ? $base_domain_parts[$count_long_domain - 2] : NULL;

        // check that 2nd to last matches
        if ($last_long_penult == $last_base_penult) {
          // last 2 parts link to this domain
          $match = TRUE;
        }
      }
      else {
        // there's only one part, and it links here
        $match = TRUE;
      }

      // We only get down here if the long URL links to this domain
      // by the way, we're ignoring any subdomain...
      // so http://lbt.me/something and http://www.lbt.me/something are assumed to be the same
      if ($match) {
        $queries  = array();
        if(isset($long_parse['query'])){
          // let's see if there's a $_GET['q'] in the long URL
          $query = $long_parse['query'];
          $query  = html_entity_decode($query);
          $query_array  = explode('&', $query);
          foreach ($query_array as $val) {
            $x = explode('=', $val);
            $queries[$x[0]] = $x[1];
          }
        }
        if (isset($queries['q'])) {
          // if there's a 'q' query, Drupal uses this instead of anything in the path
          $path = $queries['q'];
        }
        else {
          $path = $long_parse['path'];
        }

        // see if this is a link to an existing shortURL
        // remove the leading "/" from path, if it exists
        $path = array_pop(explode('/', $path, 2));
        if ($path) {
          // get the base path of this Drupal install
          $base = array_pop(explode('/', base_path(), 2));
          // remove the base from the path
          if ($base) {
            $path = preg_replace('!' . preg_quote($base, '!') . '!i', '', $path);
          }
          if (shurly_url_exists($path)) {
            $return = FALSE;
          }
        }
      }

    }
  }
  return $return;
}

/**
 * Generate a random short URL
 * Pretty much unused at this point
 * this method could take a LOOOONG time on a site with lots of URLs
 */
function shurly_generate_random($len = NULL) {
$len=5;
  if ($len == NULL) {
    $len = variable_get('shurly_length', 4);
  }
  $charset = "abcdefghijklmnopqrstuvwxyz123456789";
  $charlen = strlen($charset) - 1;
  do {
    $str = '';
    for ($i=0; $i<$len; $i++) {
      $str .= $charset[mt_rand(0, $charlen)];
    }
    // check that this string hasn't been used already
    // check that the string is a valid (available) path
  } while (shurly_url_exists($str) || !shurly_path_available($str));

  return $str;
}

/**
 * Return next available short URL
 */
function shurly_next_url() {
$len = variable_get('shurly_length', 5);
if ($len == NULL) {
    $len = variable_get('shurly_length', 5);
  }
  $charset = "abcdefghijklmnopqrstuvwxyz123456789";
  $charlen = strlen($charset) - 1;
  do {
    $str = '';
    for ($i=0; $i<$len; $i++) {
      $str .= $charset[mt_rand(0, $charlen)];
    }
    // check that this string hasn't been used already
    // check that the string is a valid (available) path
  } while (shurly_url_exists($str) || !shurly_path_available($str));

  return $str;
}

/**
 * Checks to see if there's a menu handler, path alias, or language prefix for a given path
 *
 * @return TRUE if there are no conflicts
 */
function shurly_path_available($path) {

  // check to see if path represents an enabled language
  $languages = language_list();
  if (array_key_exists($path, $languages)) {
    return FALSE;
  }

  $return = TRUE;
  // see if $path is an alias
  $source = drupal_lookup_path('source', $path);
  if ($source) {
    // if so, set alias source to $path
    $path = $source;
  }
  // check to see if $path has a menu callback
  if (menu_get_item($path)) {
    $return = FALSE;
  }
  return $return;
}

/**
 * Check to see if this short URL already exists
 */
function shurly_url_exists($short, $long = NULL) {
  $redirect = shurly_get_redirect($short);
  $return = FALSE;
  if ($redirect) {
    $return = 'found';
  }
  if ($long && $redirect && $redirect->destination == $long) {
    $return = 'match';
  }
  return $return;
}

/**
 * Given the short URL, return the long one
 *  NOTE: Always check $redirect->active before using the result
 */
function shurly_get_redirect($short_url, $check_active = FALSE) {
  // we add 'BINARY' to ensure that we're doing a CASE SENSITIVE query
  $query = "SELECT * FROM {shurly} WHERE BINARY source = :short";
  if ($check_active) {
    $query .= ' AND active = 1';
  }
  $redirect = db_query($query, array('short' => $short_url))->fetchObject();
  return $redirect;
}

/**
 * Get the latest generated short URL by a given user for a given long URL
 */
function shurly_get_latest_short($long, $uid) {
  return db_query("SELECT source, destination, count FROM {shurly} WHERE destination = :long AND uid = :uid AND custom = 0 AND active = 1 ORDER BY rid DESC", array('long' => $long, 'uid' => $uid))->fetchField();;
}
/* utility function:  go get it! */
  function get_url($url) {
$ch = curl_init(); 

    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0) (toolbar1.0 - gkurl.us - social url shortener - bot@gkurl.us)");
    curl_setopt ($ch, CURLOPT_REFERER, "http://gkurl.us");  
curl_setopt($ch, CURLOPT_URL, $url); 

//return the transfer as a string 
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 

// $output contains the output string 
$output = curl_exec($ch); 
    curl_close($ch);
    return $output;
  }
function get_reddit($url) {
  $reddit_url = 'http://www.reddit.com/api/info.{format}?url='.$url.'&limit=1';
  $format = 'json';
  $score = $ups = $downs = 0; 
$permalink= "/submit?url=" . $url;

  /* action */
  $content = get_url(str_replace('{format}',$format,$reddit_url)); //again, can be xml or json
  if($content) {
    if($format == 'json') {
      $json = json_decode($content,true);
      foreach($json['data']['children'] as $child) { // we want all children for this example
        $ups+= (int) $child['data']['ups'];
        $downs+= (int) $child['data']['downs'];
$permalink= $child['data']['permalink'];
        //$score+= (int) $child['data']['score']; //if you just want to grab the score directly
      }
      $score = $ups - $downs;
    }
  }

  /* output */

 return "<a href=\"http://reddit.com$permalink\">$score points on reddit</a>"; //13
}


function get_title($url) {
$ourl=$url;
$reddit_url = '';
if (preg_match('/reddit.com/', $ourl, $matches)){
$reddit_url = 'http://reddit.com/api/info.{format}';
}
else{
$reddit_url = 'http://www.reddit.com/api/info.{format}?url='.$ourl. '&limit=1';
}
$format = 'json'; 
$score = $ups = $downs = 0; 
$title="";

  /* action */

  $content = file_get_contents(str_replace('{format}',$format,$reddit_url));
  if($content) {
    if($format == 'json') {
      $json = json_decode($content,true);
      foreach($json['data']['children'] as $child) { 
        $title= $child['data']['title'];
        $downs+= (int) $child['data']['downs'];
      }
    }
  }
  
if ($title){
return $title; 
}
else{
// create curl resource 
$output = get_url($url);

$pattern = '/[<]title[>]([^<]*)[<][\/]titl/i';

preg_match($pattern, $output, $matches);
if ($matches){
$title =$matches[1];
}
return($title);

}   

  }

  function shurly_goto($row) {
  if (!$row || (isset($_REQUEST['redirect']) && $_REQUEST['redirect'] == 'false')) {
    return;
  }

  // Allow other modules to implement hook_shurly_redirect_before().
  // to add additional logging information to the database or perform other tasks
  // _before() is probably best to use for altering the $row->destination
  // Remember this is running during hook_boot(). Many Drupal functions are unavailable.
  module_invoke_all('shurly_redirect_before', $row);
  $url = $row->destination;
  $shorturl = $row->source;
  $clicks = $row->count;
  $uid = $row->uid;
  
  $result = db_query('SELECT name FROM {users} WHERE uid = :uid', array(':uid' => $uid));
  foreach ($result as $record) {
  $user = $record->name;
  }
  
  


  // Remove newlines from the URL to avoid header injection attacks.
  $url = str_replace(array("\n", "\r"), '', $url);

  // We do not want this while running update.php.
  if (variable_get('maintenance_mode', 0)){
   session_write_close();
  header('Location: '. $url, TRUE, 301);
  
  }
  else if (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update') {
  
		//-------------------------------------------------------------------------
		//CUSTOM CODE HERE - VIEWS SUPPORT
		//-------------------------------------------------------------------------
		if ($user =="")
		$user = "Anonymous";    
		// get domain array
		$nowww =preg_replace('/www\./','',$url);
		$lower = mb_strtolower($url);
		$domain = parse_url($nowww);
		$host =mb_strtolower($domain["host"]);
		//clean 301 redirect
		$redirectall = array(
        'reddit.com', 'kurtonium.com', 'me.kurtonium.com', 'nytimes.com', 'google.com', 'www.reddit.com'
		);
		//dont blacklist lookup
		$dontlookup = array (
		
		);
		//banned array
		$bannedurls = array(
        'mess4you.com', 'goo.gl', 'etsyawards.com', 'goneviral.com', 'adf.ly', 'jbbs.livedoor.jp',
		);
		if (in_array($host, $redirectall)){
		session_write_close();
		header('Location: '. $url, TRUE, 301);
		}
		if (in_array($host, $bannedurls)){
		session_write_close();
		header('Location: http://gkurl.us/pics?source=banned_domain_' . $host, TRUE, 301);
		}
		//redirect for those super spammy domains
		//in full url
		else if (preg_match('/s=gkurl.us/', $url, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/pics?source=superspam', TRUE, 301);
		}
		else if (preg_match('/imgur.com\/a/', $url, $matches)) {
		session_write_close();
		header('Location: '. $url, TRUE, 301);
		}
		
		//in host
		else if (preg_match('/\.tk|\.ru|\.sk/', $host, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/countryblock?domain='. $host , TRUE, 301);
		}
		//NSFW
		else if ($user =="nsfw"){
		session_write_close();
		header('Location: http://gkurl.us/x?id='. $shorturl, TRUE, 301);
			}
		//redirect to internal page if supported video site
		//jquery v page support
		//match url
		else if (preg_match('/youtube.com\/watch|hulu.com\/watch|flickr.com\/photos|comedycentral.com\/video-clips|instagram.com\/p\/|vine.co\/v\/|tumblr.com\/post\//', $lower, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/v?id='. $shorturl , TRUE, 301);
		}
		//match domain
		else if (preg_match('/ustream|imgur.com|wikipedia.org|livememe.com|i.imgur.com|justin.tv|yfrog.com|vimeo.com|funnyordie|collegehumor.com|metacafe.com|quickmeme.com|qkme.me|dailymotion.com|amazon.com|soundcloud.com|twitter.com/', $host, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/v?id='. $shorturl, TRUE, 301);
		}
		//picviewer image types
		else if (preg_match('/\.jpg|\.png|\.gif|\.jpeg/', $lower, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/p?i='. $shorturl, TRUE, 301);
		}
		//embed pdf files
		else if (preg_match('/\.pdf/', $lower, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/v?id='. $shorturl, TRUE, 301);
		}
		//php video page support
		//mlb.com pornhub
		else if (preg_match('/pornhub.com\/view|mlb.com\/video\/play.jsp/', $lower, $matches)) {
		session_write_close();
		header('Location: http://gkurl.us/video?id='. $shorturl, TRUE, 301);
		}
		//redirect internal links
		else if ("gkurl.us" == $host) {
		session_write_close();
		header('Location: '. $url, TRUE, 301);
		}		
		if (in_array($host, $dontlookup, false)){
		//check against blacklists
		$domain = $host . '.multi.surbl.org';
		$record = dns_get_record( $domain );
		if( count( $record ) > 0 ) {
		session_write_close();
		header('Location: http://gkurl.us/blacklisted?id=' . $host , TRUE, 301);
		}
		}
		//all other cases
		else {
		$title=get_title($url);
		$reddit=get_reddit($url);
echo <<<PAGE
		<html>
		<head>
		<title>$title - gkurl.us</title>
		<meta name="keywords" content="firefox, google, twitter, digg, reddit, facebook, youtube, news, $shorturl">
		<meta name="copyright" content="Copyright © 2013 Kurtonium Media">
		<meta name="author" content="gkurl.us">
		<meta name="email" content="admin@gkurl.us">
		<meta name="Charset" content="UTF-8">
		<meta name="Distribution" content="Global">
		<meta name="Rating" content="General">
		<meta name="Robots" content="INDEX,FOLLOW">
		<meta name="Revisit-after" content="7 Days">
		<link rel="stylesheet" href="http://gkurl.us/sites/all/modules/shurly/toolbar.css" type="text/css" media="all" />
		<script type="text/javascript">
				function setIframeHeight(gkurl-frame) {
				  //var iframeWin = window.frames[gkurl-frame];
				  var iframeEl = document.getElementById? document.getElementById(gkurl-frame): document.all? document.all[gkurl-frame]: null;
				  if (iframeEl) {
				  iframeEl.style.height = "auto"; // helps resize (for some) if new doc shorter than previous
				  //var docHt = getDocHeight(iframeWin.document);
				  // need to add to height to be sure it will all show
				  var h = alertSize();
				  var new_h = (h-300);
				  iframeEl.style.height = new_h + "px";
				  //alertSize();
				  }
				}

				function alertSize() {
				  var myHeight = 0;
				  if( typeof( window.innerWidth ) == 'number' ) {
					//Non-IE
					myHeight = window.innerHeight;
				  } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
					//IE 6+ in 'standards compliant mode'
					myHeight = document.documentElement.clientHeight;
				  } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
					//IE 4 compatible
					myHeight = document.body.clientHeight;
				  }
				  //window.alert( 'Height = ' + myHeight );
				  return myHeight;
				}
			</script>
			
		</head>

		<body onload="setIframeHeight('gkurl-frame');">
		<div id="gkurl-bar">
		<div id="gkurl-about">
		<div id="toolbar" class="toolbar overlay-displace-top clearfix toolbar-processed">
		<div class="toolbar-menu clearfix">
			<ul id="toolbar-home"><li class="home first last active"><a href="/" title="Home" class="active"><span class="home-link">Home</span></a></li>
		</ul>    


		<ul id="toolbar-user"><li class="account first">
		</li>
				 
		</ul>  <ul> <li class="menu"> <ul id="main-menu-links" class="links clearfix"><li class="menu-227 first active"></li>
		<li class="menu-387"><a href="/login?destination=node" title="">My URLS</a></li>
		<li class="menu-382"><a href="/popular" title="">Links</a></li>
		<li class="menu-1285"><a href="http://gkurl.us/pics" title="">Pics</a></li>
		<li class="menu-1286"><a href="http://gkurl.us/videos" title="">Videos</a></li>
		<li class="menu-326"><a href="/about">About</a></li>
		<li class="menu-1094"><a href="/content/tools" title="gkurl.us tools">Tools</a></li>
		<li class="menu-496 last"><a href="/faq">FAQ</a></li></li>
		</ul>
		</div>
		<a href="/" title="Hide shortcuts" class="toggle toolbar-toggle-processed toggle-active"></a>      
		<div class="toolbar-drawer clearfix">

			<div class="toolbar-shortcuts"><ul class="menu clearfix"><li class="first last leaf"> <a href="http://gkurl.us/stats?source=$shorturl" id="toolbar-clicks" title="Total times this link was clicked">$clicks clicks </a></li>


		<li class="first last leaf"> <a href="http://gkurl.us/user/$uid/urls">   Submitted by $user </a> $reddit <a id="gkurl-once" href="$url" title="Close this toolbar">close</a></li>	
			
			

			<li class="first last leaf"> <a href="http://www.addthis.com/bookmark.php?url=http://gkurl.us/$shorturl&title=$title"> Share </a></li><li class="first last leaf"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://gkurl.us/$shorturl" data-via="gkurl" data-related="gkurl">Tweet</a>
		<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li></ul></div>


		<a href="http://gkurl.us/toolbar" id="edit-shortcuts">Powered by gkurl.us</a> 

 </div>
		</div>



		 </div>
		</div>

		</div>
		</div>
		<div id="page">
		<iframe id="gkurl-frame" frameborder="0" width="100%" height="100%" noresize="noresize" src="$url" name="gkurlFrame">
		</iframe>

		</div>
		</body>
		</html>
PAGE;
		}
  // update access information on this row
  db_query('UPDATE {shurly} SET count = count + 1, last_used = :time WHERE rid = :rid', array('time' => time(), 'rid' => $row->rid));
session_write_close();
  // note: If possible, other modules should probably insert more information
  // in the database by using hook_db_rewrite_sql() on the above query
  // rather than creating a new db call
// Allow modules to react to the end of the page request before redirecting.
	module_invoke_all('exit', $shorturl);
    module_invoke_all('exit', $url);
	module_invoke_all('exit', $clicks);
  }
  else{
  session_write_close();
  header('Location: '. $url, TRUE, 301);
  }
  // Allow other modules to implement hook_shurly_redirect_after().
  // _after() happens after the redirect has already been sent to browser.
  // It's probably best for slower operations like additional database logging
  // Remember this is running during hook_boot(). Many Drupal functions are unavailable.
  module_invoke_all('shurly_redirect_after', $row);

  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none of the code below the
  // drupal_goto() call gets executed upon redirection.
  exit();
}


/**
 * Internal function to call url() without language prefixing or subdomain rewrites
 */
function _surl($path = NULL, $options = array()) {
  $options['language'] = _shurly_language_stub();
  return url($path, $options);
}

/**
 * Internal function to call l() without language prefixing or subdomain rewrites
 */
function _sl($text, $path, $options = array()) {
  $options['language'] = _shurly_language_stub();
  return l($text, $path, $options);
}

/**
 * Return default language object which will avoid redirects and subdomains
 * 
 * This is necessary because we always want our short URLs to be
 * the first item in the path, even if we've got another language enabled
 */
function _shurly_language_stub() {
  static $language;
  if (!isset($language)) {
    $language = language_default();
    $language->prefix = '';
    $language->domain = '';
  }
  return $language;
}
